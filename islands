--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.2.5) ~  Much Love, Ferib 

]]--

do
	local v0 = tonumber;
	local v1 = string.byte;
	local v2 = string.char;
	local v3 = string.sub;
	local v4 = string.gsub;
	local v5 = string.rep;
	local v6 = table.concat;
	local v7 = table.insert;
	local v8 = math.ldexp;
	local v9 = getfenv or function()
		return _ENV;
	end;
	local v10 = setmetatable;
	local v11 = pcall;
	local v12 = select;
	local v13 = unpack or table.unpack;
	local v14 = tonumber;
	local function v15(v16, v17, ...)
		local v18 = 0;
		local v19;
		local v20;
		local v21;
		local v22;
		local v23;
		local v24;
		local v25;
		local v26;
		local v27;
		local v28;
		local v29;
		local v30;
		while true do
			if (v18 == 1) then
				function v21(v31, v32, v33)
					if v33 then
						local v71 = 0 + 0;
						local v72;
						while true do
							if (v71 == (251 - (91 + 160))) then
								v72 = (v31 / ((1785 - (1484 + 299)) ^ (v32 - (889 - (563 + 112 + 213))))) % ((2 - 0) ^ (((v33 - ((4 - 3) - (0 + 0))) - (v32 - (495 - (243 + 251)))) + 1 + (363 - (299 + 64))));
								return v72 - (v72 % (1 + 0));
							end
						end
					else
						local v73 = 0;
						local v74;
						while true do
							if ((0 - 0) == v73) then
								v74 = (2 + 0) ^ (v32 - (2 - 1));
								return (((v31 % (v74 + v74)) >= v74) and 1) or (0 + 0);
							end
						end
					end
				end
				v22 = nil;
				function v22()
					local v39 = 1113 - (88 + 1025);
					local v40;
					while true do
						if (v39 == (2 - 1)) then
							return v40;
						end
						if (v39 == (0 - 0)) then
							v40 = v1(v16, v19, v19);
							v19 = v19 + (1 - 0);
							v39 = 1117 - (192 + 751 + 173);
						end
					end
				end
				v23 = nil;
				v18 = 2;
			end
			if (v18 == 5) then
				v30 = nil;
				function v30(v34, v35, v36)
					local v41 = 0;
					local v42;
					local v43;
					local v44;
					while true do
						if (v41 == 1) then
							v44 = v34[3];
							return function(...)
								local v89 = 0;
								local v90;
								local v91;
								local v92;
								local v93;
								local v94;
								while true do
									if (v89 == 0) then
										v90 = 1;
										v91 = -1;
										v89 = 1;
									end
									if (v89 == 1) then
										v92 = {...};
										v93 = v12("#", ...) - 1;
										v89 = 2;
									end
									if (v89 == 3) then
										A, B = v28(v11(v94));
										if not A[1] then
											local v98 = v34[4][v90] or "?";
											error("Script error at [" .. v98 .. "]:" .. A[2]);
										else
											return v13(A, 2, B);
										end
										break;
									end
									if (v89 == 2) then
										v94 = nil;
										function v94()
											local v99 = v42;
											local v100 = v43;
											local v101 = v44;
											local v102 = v28;
											local v103 = {};
											local v104 = {};
											local v105 = {};
											for v109 = 0 + 0, v93 do
												if ((3172 > 1353) and (v109 >= v101)) then
													v103[v109 - v101] = v92[v109 + 1];
												else
													v105[v109] = v92[v109 + 1];
												end
											end
											local v106 = (v93 - v101) + 1 + 0;
											local v107;
											local v108;
											while true do
												local v110 = 917 - (504 + (2001 - (199 + 1389)));
												while true do
													if ((1971 <= 3836) and (v110 == (0 + 0))) then
														v107 = v99[v90];
														v108 = v107[1 + 0];
														v110 = 1 + (116 - (53 + 63));
													end
													if (((11 + 2113) <= (263 + 4342)) and ((1 - 0) == v110)) then
														if ((v108 <= (19 + 12)) or (679 > (5952 - (482 + 915)))) then
															if ((v108 <= (4 + 11)) or (281 > 1801)) then
																if (((1171 + 2454) > (2682 - (276 + 1067))) and (v108 <= (2 + 5))) then
																	if (((10601 - 6979) < 4699) and (v108 <= (12 - 9))) then
																		if ((v108 <= 1) or ((2357 + 225) >= (531 + 2450))) then
																			if ((v108 == (0 - 0)) or ((4559 - 1842) <= (35 + 539 + 1681))) then
																				v90 = v107[3];
																			else
																				local v137 = 223 - (193 + 30);
																				local v138;
																				local v139;
																				local v140;
																				while true do
																					if (((0 - 0) == v137) or ((2833 + 514) <= (4088 - (831 + 214)))) then
																						v138 = 337 - (28 + 21 + 288);
																						v139 = nil;
																						v137 = 223 - (181 + 41);
																					end
																					if (((13052 - 9505) > (1900 - (146 + 1536))) and (v137 == 1)) then
																						v140 = nil;
																						while true do
																							if ((v138 == (2 - 1)) or ((6143 - 2638) < (2521 - (579 + 110)))) then
																								while true do
																									if (((0 + 0) == v139) or (4492 == 331)) then
																										v140 = v105[v107[4]];
																										if (not v140 or (4338 <= (3334 - (538 + 769)))) then
																											v90 = v90 + 1 + 0;
																										else
																											local v409 = 0 - 0;
																											local v410;
																											while true do
																												if (((1006 - (20 + (722 - 509))) == 773) and (0 == v409)) then
																													v410 = (0 - 0) - 0;
																													while true do
																														if ((4772 == (4821 - (12 + 37))) and (v410 == (809 - (78 + 731)))) then
																															v105[v107[2 + (491 - (276 + 215))]] = v140;
																															v90 = v107[1094 - (595 + 496)];
																															break;
																														end
																													end
																													break;
																												end
																											end
																										end
																										break;
																									end
																								end
																								break;
																							end
																							if ((v138 == (0 + 0)) or ((1147 - 699) > (17447 - 13344))) then
																								local v309 = 0 + 0;
																								while true do
																									if (((1125 + 3341) >= (5003 - (402 + 1453))) and (v309 == 1)) then
																										v138 = 1 + 0;
																										break;
																									end
																									if (((1156 + 2256) > 1716) and (v309 == 0)) then
																										v139 = 0 + 0;
																										v140 = nil;
																										v309 = 4 - 3;
																									end
																								end
																							end
																						end
																						break;
																					end
																				end
																			end
																		elseif ((v108 == 2) or ((3909 - (147 + 640)) <= (282 + 33))) then
																			local v141 = 788 - (538 + 250);
																			local v142;
																			while true do
																				if ((v141 == (0 - 0)) or ((13324 - 9230) > (3038 + 1062))) then
																					v142 = v107[2 + 0];
																					do
																						return v105[v142](v13(v105, v142 + (1197 - (268 + 928)) + 0, v107[3 + 0]));
																					end
																					break;
																				end
																			end
																		else
																			local v143 = 95 - (33 + 62);
																			local v144;
																			local v145;
																			local v146;
																			local v147;
																			while true do
																				if (((11873 - 7176) > (107 + 1424)) and (v143 == (1 + 0))) then
																					v146 = nil;
																					v147 = nil;
																					v143 = (611 - 268) - (231 + 110);
																				end
																				if ((4148 > (152 + 721)) and (v143 == 2)) then
																					while true do
																						if (((1691 - (647 + 591)) <= (1670 - (38 + 11 + 231))) and (v144 == (1711 - (841 + (2114 - 1245))))) then
																							local v310 = 0 - 0;
																							while true do
																								if (((6466 - (5832 - (588 + 528))) <= 2788) and (v310 == (524 - (136 + (1776 - (285 + 1104)))))) then
																									v144 = 1 + 1;
																									break;
																								end
																								if (((5223 - (184 + 173 + 1087)) < 4217) and (v310 == (739 - (603 + 136)))) then
																									local v365 = 1696 - (601 + 1095);
																									while true do
																										if (((505 + 49) < (10471 - 6378)) and (v365 == 0)) then
																											v147 = {};
																											v146 = v10({}, {__index=function(v428, v429)
																												local v445 = 0 - 0;
																												local v446;
																												while true do
																													if (((2014 - (15 + 327)) == (1780 - (58 + 50))) and (v445 == (0 + 0))) then
																														local v464 = 0;
																														while true do
																															if (((4953 - (159 + 413)) > 1870) and (v464 == (0 - (1079 - (662 + 417))))) then
																																v446 = v147[v429];
																																return v446[1 + 0][v446[2 + 0]];
																															end
																														end
																													end
																												end
																											end,__newindex=function(v430, v431, v432)
																												local v447 = 150 - (45 + 105);
																												local v448;
																												local v449;
																												while true do
																													if ((v447 == (0 + 0)) or (472 > 3086)) then
																														v448 = 0 + 0 + 0;
																														v449 = nil;
																														v447 = 1;
																													end
																													if ((543 == (1903 - 1360)) and (v447 == 1)) then
																														while true do
																															if (((2001 - (598 + 6)) > (318 - (82 + 97))) and (v448 == (0 + 0))) then
																																v449 = v147[v431];
																																v449[1][v449[6 - (1285 - (1098 + 183))]] = v432;
																																break;
																															end
																														end
																														break;
																													end
																												end
																											end});
																											v365 = 1 + 0;
																										end
																										if (((3000 - 1987) > 169) and (((1226 - (1186 + 39)) + 0) == v365)) then
																											v310 = 1 - 0;
																											break;
																										end
																									end
																								end
																							end
																						end
																						if ((v144 == (5 - 3)) or ((1141 + 3738) <= ((684 - (464 + 87)) + 197))) then
																							for v343 = 3 - 2, v107[(2205 - (578 + 303)) - (1216 + 104)] do
																								local v344 = 0;
																								local v345;
																								local v346;
																								while true do
																									if (((6482 - (4467 - (68 + 233))) <= (11712 - 6882)) and ((1 + 0) == v344)) then
																										while true do
																											if ((v345 == (0 + 0)) or ((2682 - (571 + 10 + 58)) >= (6293 - 2132))) then
																												local v433 = (0 - 0) + 0;
																												while true do
																													if (((1 - 0) == v433) or ((9135 - 6426) > 4491)) then
																														v345 = 2 - 1;
																														break;
																													end
																													if (((4314 - 1043) <= 4262) and (v433 == (0 - (430 - (395 + 35))))) then
																														v90 = v90 + 1;
																														v346 = v99[v90];
																														v433 = 117 - (10 + 106);
																													end
																												end
																											end
																											if (((3975 - (604 + 1003)) == (4301 - (86 + 1847))) and (v345 == (1 + 0))) then
																												if ((195 == (1590 - (268 + 1127))) and (v346[1801 - (694 + 1106)] == (35 - 18))) then
																													v147[v343 - 1] = {v105,v346[13 - 10]};
																												else
																													v147[v343 - (1211 - (74 + 575 + 561))] = {v35,v346[3]};
																												end
																												v104[#v104 + 1 + 0] = v147;
																												break;
																											end
																										end
																										break;
																									end
																									if ((((8548 + 4879) - 10548) <= (1380 + 1890)) and (v344 == (633 - (68 + 565)))) then
																										v345 = 1918 - (1593 + 325);
																										v346 = nil;
																										v344 = 1 - 0;
																									end
																								end
																							end
																							v105[v107[4 - 2]] = v30(v145, v146, v36);
																							break;
																						end
																						if ((4766 > (2030 + 1839)) and (v144 == (0 + 0))) then
																							local v312 = 0 - 0;
																							local v313;
																							while true do
																								if (((2958 - (578 + 1261)) < (4434 - (1226 + 453))) and (v312 == (0 - 0))) then
																									v313 = 1088 - (183 + 905);
																									while true do
																										if ((4626 >= (4421 - (633 + (1514 - (620 + 503))))) and (v313 == 0)) then
																											v145 = v100[v107[1482 - (1324 + 155)]];
																											v146 = nil;
																											v313 = 1;
																										end
																										if ((((979 + 1242) - (777 + 590)) < (593 + 623)) and (v313 == (3 - 2))) then
																											v144 = 1;
																											break;
																										end
																									end
																									break;
																								end
																							end
																						end
																					end
																					break;
																				end
																				if (((8461 - 6415) >= (152 + 655)) and ((763 - (102 + 335 + 326)) == v143)) then
																					v144 = 0;
																					v145 = nil;
																					v143 = 1;
																				end
																			end
																		end
																	elseif (((394 + 174) <= (3555 - (1086 + 165))) and (v108 <= (1767 - (760 + 1002)))) then
																		if ((v108 > (1503 - (1019 + 480))) or ((6353 - 2715) == 3945)) then
																			if (((416 + 2524) == (4142 - ((867 - 467) + 802))) and (v105[v107[2 + 0]] == v107[891 - (799 + 88)])) then
																				v90 = v90 + ((6 - 3) - 2);
																			else
																				v90 = v107[3];
																			end
																		else
																			local v148 = 0;
																			local v149;
																			local v150;
																			local v151;
																			local v152;
																			while true do
																				if ((v148 == ((2 - 0) - 0)) or ((418 + 3191) <= (1239 + 585))) then
																					while true do
																						if ((1 == v149) or ((3173 - (1223 + 132)) <= (2093 - (206 + 1286)))) then
																							v152 = v105[v150 + 2];
																							if ((v152 > (1562 - (788 + 774))) or ((14805 - 10108) == 682)) then
																								if ((v151 > v105[v150 + (613 - (234 + 378))]) or ((2262 - 1119) >= (651 + 1127))) then
																									v90 = v107[1 + 0 + 2];
																								else
																									v105[v150 + ((420 - 162) - (165 + 90))] = v151;
																								end
																							elseif ((3123 <= (4921 - (153 + 518))) and (v151 < v105[v150 + 1 + 0])) then
																								v90 = v107[4 - (1 + 0)];
																							else
																								v105[v150 + 2 + 1] = v151;
																							end
																							break;
																						end
																						if (((5248 - (84 + 237)) >= (3509 - 1504)) and (v149 == (0 - 0))) then
																							local v315 = 0;
																							while true do
																								if ((v315 == (0 + 0)) or (27 > (3234 + 613))) then
																									v150 = v107[(18 - 13) - 3];
																									v151 = v105[v150];
																									v315 = 1 + 0;
																								end
																								if (((22104 - 17335) >= (1212 + 3009)) and (v315 == (2 - 1))) then
																									v149 = 1 + 0;
																									break;
																								end
																							end
																						end
																					end
																					break;
																				end
																				if ((v148 == (2 - (124 - (65 + 58)))) or (1245 >= (1092 + 416))) then
																					v151 = nil;
																					v152 = nil;
																					v148 = 587 - (490 + 95);
																				end
																				if (((979 - (2781 - 2135)) == (710 - 377)) and (v148 == (1833 - (1332 + 501)))) then
																					v149 = 0 - 0;
																					v150 = nil;
																					v148 = 2 - 1;
																				end
																			end
																		end
																	elseif ((((1794 - (291 + 304)) - (400 + 122)) < (3118 - (157 + 1723))) and (v108 > (13 - (2 + 5)))) then
																		local v153 = 0 - 0;
																		local v154;
																		local v155;
																		local v156;
																		while true do
																			if (((7701 - 3592) >= (21 + 29)) and (0 == v153)) then
																				v154 = 653 - (306 + (1718 - (90 + 1281)));
																				v155 = nil;
																				v153 = 1 + 0 + 0;
																			end
																			if ((v153 == (267 - (38 + 228))) or ((3496 - 1550) > (4792 - (19 + 131)))) then
																				v156 = nil;
																				while true do
																					if ((v154 == (0 - 0)) or ((9061 - 6155) >= ((14237 - 10071) - (72 + 315)))) then
																						v155 = 1564 - (33 + 1531);
																						v156 = nil;
																						v154 = 2 - 1;
																					end
																					if (((555 + 1573) < (403 + 2393)) and (v154 == ((464 - (414 + 49)) - 0))) then
																						while true do
																							if ((v155 == (0 - 0)) or ((2868 - (753 + 922)) <= 377)) then
																								v156 = v107[2];
																								v105[v156] = v105[v156]();
																								break;
																							end
																						end
																						break;
																					end
																				end
																				break;
																			end
																		end
																	else
																		v36[v107[7 - (1197 - (1078 + 115))]] = v105[v107[1401 - (818 + 581)]];
																	end
																elseif ((4204 > (5653 - 2371)) and (v108 <= (2 + (20 - 11)))) then
																	if ((v108 <= (26 - 17)) or ((2714 - ((609 - (126 + 19)) + 806)) > (6007 - 1232))) then
																		if ((4634 >= 2752) and (v108 > (7 + 1))) then
																			local v159 = 0 + 0;
																			local v160;
																			local v161;
																			local v162;
																			local v163;
																			while true do
																				if ((1495 <= (2682 - ((760 - (249 + 497)) + 3))) and (v159 == 0)) then
																					local v300 = 0;
																					while true do
																						if ((v300 == (0 - 0)) or ((3904 - ((109 - 26) + 61)) > (12490 - 8152))) then
																							v160 = 0 - 0;
																							v161 = nil;
																							v300 = 1 + 0;
																						end
																						if ((v300 == (1 + 0)) or ((4625 - (596 + 1377)) < (139 + 182))) then
																							v159 = 4 - 3;
																							break;
																						end
																					end
																				end
																				if ((4115 >= (4437 - (153 + 734 + 504))) and (v159 == (2 - 1))) then
																					v162 = nil;
																					v163 = nil;
																					v159 = 6 - 4;
																				end
																				if ((3948 == ((4533 - (860 + 364)) + 639)) and (v159 == ((35 - 21) - ((26 - 17) + 3)))) then
																					while true do
																						if (((4385 - (908 + 852)) >= (2701 - (38 + 402))) and (v160 == 0)) then
																							local v316 = 0;
																							while true do
																								if ((v316 == (0 + 0)) or (((3207 - 1724) + 652) >= (3764 - (241 + 800)))) then
																									v161 = v107[3 - (1 + 0)];
																									v162 = {v105[v161](v13(v105, v161 + 1, v91))};
																									v316 = 502 - (445 + (1625 - (9 + 1560)));
																								end
																								if ((4964 > (388 - 139)) and (v316 == (1 + 0))) then
																									v160 = 1053 - (397 + 655);
																									break;
																								end
																							end
																						end
																						if (((450 - 275) < (3796 - ((297 - 177) + 312))) and (v160 == (1544 - (614 + 929)))) then
																							v163 = 0;
																							for v347 = v161, v107[4] do
																								local v348 = 1558 - (872 + 686);
																								local v349;
																								while true do
																									if (((5711 - (1331 + 71 + 352)) == (5767 - 1810)) and ((0 - 0) == v348)) then
																										v349 = 593 - (239 + 354);
																										while true do
																											if ((v349 == (0 - 0)) or (3189 <= (259 + 1687))) then
																												v163 = v163 + (928 - (776 + 151));
																												v105[v347] = v162[v163];
																												break;
																											end
																										end
																										break;
																									end
																								end
																							end
																							break;
																						end
																					end
																					break;
																				end
																			end
																		else
																			local v164 = 0;
																			local v165;
																			local v166;
																			local v167;
																			while true do
																				if (((4773 - (108 + 211)) > (2609 - 967)) and (v164 == ((733 - (158 + 575)) + 0))) then
																					v165 = 0 + 0;
																					v166 = nil;
																					v164 = 2 - 1;
																				end
																				if ((v164 == (2 - 1)) or ((78 + 364) > ((5400 - 978) - 2935))) then
																					v167 = nil;
																					while true do
																						if ((v165 == (1942 - (1004 + 937))) or (4292 >= (15518 - 10993))) then
																							while true do
																								if (((2131 - (5 + 33 + 6)) <= (4255 - (35 + 34))) and (v166 == 0)) then
																									v167 = v107[8 - 6];
																									do
																										return v105[v167](v13(v105, v167 + (1 - 0), v91));
																									end
																									break;
																								end
																							end
																							break;
																						end
																						if ((v165 == 0) or ((8504 - (18051 - 12653)) == (1407 + 350))) then
																							v166 = 0 + 0;
																							v167 = nil;
																							v165 = (81 - (79 + 1)) + 0;
																						end
																					end
																					break;
																				end
																			end
																		end
																	elseif ((v108 == 10) or ((5735 - (1544 + 455)) < (3210 - 1726))) then
																		if ((v107[4 - 2] < v105[v107[1030 - (531 + 495)]]) or ((1108 - (1035 - (479 + 314))) > (778 + 508))) then
																			v90 = v90 + (1860 - (36 + 1823));
																		else
																			v90 = v107[3];
																		end
																	else
																		v105[v107[224 - (96 + 126)]] = v105[v107[3 + 0]] - v107[5 - 1];
																	end
																elseif ((v108 <= (40 - 27)) or (((11 - 8) + (3506 - (693 + 763))) < (839 - 639))) then
																	if (((2454 - (203 + 1361)) == (1922 - (532 + 500))) and (v108 > (1424 - (665 + 747)))) then
																		v105[v107[2]] = v36[v107[4 - 1]];
																	else
																		local v171 = 1362 - (575 + 787);
																		local v172;
																		local v173;
																		local v174;
																		local v175;
																		while true do
																			if ((((3727 - (556 + 361)) - 1415) <= (5335 - 2403)) and (v171 == (0 - 0))) then
																				v172 = 0 - 0;
																				v173 = nil;
																				v171 = 663 - (38 + 624);
																			end
																			if (((18 + 333) == (184 + (496 - (250 + 79)))) and ((3 - 2) == v171)) then
																				v174 = nil;
																				v175 = nil;
																				v171 = 2 + (0 - 0);
																			end
																			if ((v171 == (885 - (140 + 743))) or ((5378 - (608 + 708)) <= 1140)) then
																				while true do
																					if ((2889 > (1085 - (23 + 41))) and (v172 == (2 - 1))) then
																						v175 = nil;
																						while true do
																							if ((v173 == (1 + 0)) or (((4170 - (922 + 106)) - (919 + 220)) >= (4714 - (618 + 930)))) then
																								for v391 = v174 + 1, v107[3] do
																									v7(v175, v105[v391]);
																								end
																								break;
																							end
																							if ((3521 <= (4579 - (10 + 347))) and (v173 == (0 + 0 + (0 - 0)))) then
																								local v372 = 0 + 0;
																								while true do
																									if (((9414 - 5763) > ((6677 - 3453) - (338 + 611))) and (v372 == (1280 - (386 + 893)))) then
																										v173 = 2 - 1;
																										break;
																									end
																									if ((v372 == ((3355 - 1485) - (703 + 1167))) or ((1057 - ((299 - 134) + (1455 - 965))) == 960)) then
																										v174 = v107[(140 - (59 + 79)) - 0];
																										v175 = v105[v174];
																										v372 = 1 + 0;
																									end
																								end
																							end
																						end
																						break;
																					end
																					if (((3635 - (554 + 506)) <= (5130 - (286 + 263))) and (v172 == 0)) then
																						local v317 = 893 - (162 + 731);
																						while true do
																							if ((v317 == (1 + 0)) or (3723 >= (5289 - (47 + 1083)))) then
																								v172 = 1;
																								break;
																							end
																							if ((v317 == 0) or ((5703 - (945 + 882)) > (4609 - (36 + 89)))) then
																								v173 = 0 - 0;
																								v174 = nil;
																								v317 = 1 + 0;
																							end
																						end
																					end
																				end
																				break;
																			end
																		end
																	end
																elseif ((2159 <= 2952) and (v108 > (625 - (583 + 28)))) then
																	local v176 = 0 + 0;
																	local v177;
																	local v178;
																	while true do
																		if ((v176 == (0 - 0)) or ((1551 + 1592) == (2296 + 864))) then
																			local v301 = 0 + 0;
																			while true do
																				if ((v301 == (195 - ((595 - 435) + 34))) or (((4747 + 6198) - 7842) <= (1618 - (69 + 729)))) then
																					v176 = 1 + (0 - 0);
																					break;
																				end
																				if (((729 + 3516) >= (1527 - ((144 - (43 + 88)) + 31))) and (v301 == (81 - (17 + 64)))) then
																					v177 = 0 + 0;
																					v178 = nil;
																					v301 = 1;
																				end
																			end
																		end
																		if ((v176 == 1) or ((2140 - (303 + 273)) > ((6663 - 2327) - (159 + 139)))) then
																			while true do
																				if ((v177 == 0) or (3529 < (3232 - (1387 + 484)))) then
																					v178 = v107[(25 - 18) - 5];
																					do
																						return v13(v105, v178, v91);
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																else
																	v105[v107[2 + 0]] = v107[2 + 1] + v105[v107[1 + 1 + 2]];
																end
															elseif (((943 - (1041 - (348 + 39))) <= (4608 - (189 + 281))) and (v108 <= 23)) then
																if ((v108 <= ((55 - 18) - 18)) or ((2593 - (59 + 1466)) <= 241)) then
																	if ((v108 <= 17) or ((1023 - (172 + 3)) == (154 - 38))) then
																		if ((((6223 - 4745) + 592) >= (372 + 214)) and (v108 > (4 + 12))) then
																			v105[v107[1 + 1]] = v105[v107[5 - 2]];
																		else
																			v105[v107[612 - (52 + 558)]] = {};
																		end
																	elseif (((5582 - (765 + 599)) < 4572) and (v108 > 18)) then
																		local v183 = 0 - 0;
																		local v184;
																		local v185;
																		local v186;
																		while true do
																			if ((v183 == (0 - 0)) or ((4238 - (872 + 313)) > 3488)) then
																				v184 = 0 + 0;
																				v185 = nil;
																				v183 = 1 + 0;
																			end
																			if (((1 - 0) == v183) or (1355 < 690)) then
																				v186 = nil;
																				while true do
																					if ((v184 == (0 + 0)) or ((7114 - 5671) > (10535 - 6434))) then
																						local v319 = 0 + 0 + 0;
																						while true do
																							if ((v319 == (0 + 0)) or (((15664 - 4470) - 6990) < (1190 - (518 + 432)))) then
																								v185 = 0 - 0;
																								v186 = nil;
																								v319 = 1 - 0;
																							end
																							if (((1841 + 1819) > (2019 + 807)) and (v319 == (1 + 0))) then
																								v184 = 1;
																								break;
																							end
																						end
																					end
																					if ((v184 == (1 + 0)) or ((2108 - (1344 + 100)) == 4729)) then
																						while true do
																							if ((v185 == (0 + 0)) or (4872 == ((4331 - (225 + 388)) - (70 + 222)))) then
																								v186 = v107[2 + 0 + 0];
																								v105[v186] = v105[v186](v13(v105, v186 + 1, v107[7 - 4]));
																								break;
																							end
																						end
																						break;
																					end
																				end
																				break;
																			end
																		end
																	else
																		v105[v107[7 - 5]][v107[963 - ((856 - 601) + 705)]] = v105[v107[3 + 1]];
																	end
																elseif (((1888 + 1790) > (1810 - 1283)) and (v108 <= (81 - (1120 - (983 + 77))))) then
																	if (((1795 - (87 + (1640 - (716 + 694)))) > (1973 - 1402)) and (v108 > (933 - (775 + 138)))) then
																		local v189 = 0 - (0 - 0);
																		local v190;
																		local v191;
																		while true do
																			if ((v189 == (0 + 0)) or (4394 == 1106)) then
																				v190 = 0;
																				v191 = nil;
																				v189 = 1 - 0;
																			end
																			if (((2384 - 1336) <= (5701 - 3280)) and (v189 == 1)) then
																				while true do
																					if ((v190 == (0 - 0)) or (1466 == 1555)) then
																						v191 = v107[2];
																						v105[v191] = v105[v191](v13(v105, v191 + 1 + 0, v91));
																						break;
																					end
																				end
																				break;
																			end
																		end
																	else
																		local v192 = 1539 - (655 + 884);
																		local v193;
																		local v194;
																		local v195;
																		while true do
																			if (((195 + 534) <= ((2565 - (442 + 123)) + 382)) and (0 == v192)) then
																				v193 = 0;
																				v194 = nil;
																				v192 = 1308 - (366 + 941);
																			end
																			if ((1245 >= (1665 - 883)) and (v192 == (2 - 1))) then
																				v195 = nil;
																				while true do
																					if ((0 == v193) or ((5908 - (167 + 865)) <= (136 + 22 + 3854 + 119))) then
																						local v322 = (4475 - 2949) - (819 + 707);
																						while true do
																							if ((v322 == ((0 - 0) - (0 + 0))) or (959 > (866 + 428))) then
																								v194 = 0;
																								v195 = nil;
																								v322 = 1;
																							end
																							if ((v322 == (1 + 0)) or ((780 + 447) == (2391 + 1466))) then
																								v193 = (1978 - (1951 + 25)) - 1;
																								break;
																							end
																						end
																					end
																					if (((1234 + 2055) > (91 + 623)) and (v193 == (1 + 0))) then
																						while true do
																							if ((1411 == (900 + 511)) and (v194 == 0)) then
																								v195 = v107[287 - (50 + 94 + (1804 - (891 + 772)))];
																								v105[v195](v13(v105, v195 + (576 - (294 + 281)), v91));
																								break;
																							end
																						end
																						break;
																					end
																				end
																				break;
																			end
																		end
																	end
																elseif (((521 + 947) < (2761 - ((1652 - (730 + 691)) + 931))) and (v108 == (87 - 65))) then
																	v105[v107[1 + 1]][v105[v107[5 - 2]]] = v105[v107[4]];
																else
																	v105[v107[146 - ((357 - 235) + 22)]] = v105[v107[1 + 2]] % v107[4 + 0];
																end
															elseif ((4632 > (12277 - 8272)) and (v108 <= 27)) then
																if (((4880 - (683 + 1302)) < 2973) and (v108 <= 25)) then
																	if (((6484 - (128 + 1530)) == (22623 - 17797)) and (v108 > (61 - 37))) then
																		v105[v107[2]] = v105[v107[6 - 3]] % v105[v107[4]];
																	else
																		local v200 = 0 + 0;
																		local v201;
																		local v202;
																		local v203;
																		local v204;
																		local v205;
																		while true do
																			if ((v200 == (1 + 1)) or (4202 <= (902 + 23))) then
																				v205 = nil;
																				while true do
																					if ((v201 == 0) or ((11182 - 8887) > (1646 + 3310))) then
																						local v323 = 767 - (195 + 572);
																						while true do
																							if ((v323 == (1362 - (713 + 649))) or ((3629 - (13 + 1050)) < (4986 - 3786))) then
																								v202 = 645 - (614 + 31);
																								v203 = nil;
																								v323 = 3 - 2;
																							end
																							if ((v323 == (1 + 0)) or ((17734 - 13199) <= (966 + 1656))) then
																								v201 = 1;
																								break;
																							end
																						end
																					end
																					if (((1 + 1) == v201) or ((197 + 29) > 3552)) then
																						while true do
																							if ((1440 == (6740 - 5300)) and (v202 == (0 + 0))) then
																								local v376 = 0;
																								while true do
																									if ((v376 == 0) or ((177 + 1019) < (1266 - (490 + 550)))) then
																										v203 = v107[(721 + 443) - (163 + 999)];
																										v204 = v105[v203 + (1122 - (308 + 812))];
																										v376 = 1 + 0;
																									end
																									if ((v376 == (1 + 0)) or (2703 < (1148 + 1070))) then
																										v202 = (4 - 1) - 2;
																										break;
																									end
																								end
																							end
																							if (((480 - (254 + 4 + 220)) == v202) or ((1980 + 190) == (2016 - (382 + 155)))) then
																								if (((3397 - (41 + 137)) <= (10203 - (7654 - (29 + 868)))) and (v204 > (1231 - (217 + 1014)))) then
																									if ((v205 <= v105[v203 + (1 - 0)]) or ((3217 - (125 + 1603)) == (4102 - (5 + 7)))) then
																										local v437 = 0 + 0;
																										local v438;
																										while true do
																											if ((4398 > 3688) and (v437 == (0 + 0))) then
																												v438 = 0 - 0;
																												while true do
																													if ((((5650 - (558 + 45)) - (1036 + (1241 - (430 + 574)))) == (2937 + 837)) and (v438 == (0 - 0))) then
																														v90 = v107[8 - 5];
																														v105[v203 + (1873 - (105 + 1765))] = v205;
																														break;
																													end
																												end
																												break;
																											end
																										end
																									end
																								elseif ((v205 >= v105[v203 + (1507 - (271 + 1235))]) or ((3965 - (62 + 3)) <= (5090 - 1762))) then
																									local v439 = 0 - 0;
																									while true do
																										if (((1288 - (397 + 202)) < (5899 - 3271)) and (v439 == 0)) then
																											v90 = v107[3];
																											v105[v203 + 2 + 1] = v205;
																											break;
																										end
																									end
																								end
																								break;
																							end
																							if (((1400 - (632 + 767)) == v202) or ((5426 - (757 + 1198)) == (3869 - (191 + (726 - 286))))) then
																								local v377 = 0 + 0;
																								while true do
																									if (((4119 - (1123 + 423)) < 4570) and (v377 == (162 - (60 + 102)))) then
																										v205 = v105[v203] + v204;
																										v105[v203] = v205;
																										v377 = 1 + 0;
																									end
																									if ((v377 == 1) or (2183 <= (1294 + 305))) then
																										v202 = 2;
																										break;
																									end
																								end
																							end
																						end
																						break;
																					end
																					if (((3 - 2) == v201) or (((1354 - (1010 + 213)) + 1969) > (1270 + 1112))) then
																						local v324 = 334 - (304 + 30);
																						while true do
																							if (((6784 - 3227) > 144) and (v324 == (2 - 1))) then
																								v201 = 2;
																								break;
																							end
																							if (((521 + 804) >= ((94 + 1283) - ((309 - 132) + (30 - 19)))) and (v324 == 0)) then
																								v204 = nil;
																								v205 = nil;
																								v324 = 3 - 2;
																							end
																						end
																					end
																				end
																				break;
																			end
																			if ((v200 == ((276 - (128 + 147)) + 0)) or (2672 >= (4556 - 1852))) then
																				v203 = nil;
																				v204 = nil;
																				v200 = 1 + 1;
																			end
																			if (((7664 - 5426) > (4190 - 3155)) and (v200 == (0 + 0))) then
																				v201 = 1155 - (467 + 688);
																				v202 = nil;
																				v200 = 1911 - ((62 - 32) + 1880);
																			end
																		end
																	end
																elseif (((5824 - (1014 + 303)) == (5783 - 1276)) and (v108 > ((4266 - 2891) - (983 + 366)))) then
																	if ((v105[v107[2]] <= v107[5 - (449 - (393 + 55))]) or ((8781 - 5008) > ((2587 + 9216) - 7512))) then
																		v90 = v90 + (694 - (464 + 229));
																	else
																		v90 = v107[3 + (0 - 0)];
																	end
																else
																	do
																		return v105[v107[1 + 1]];
																	end
																end
															elseif (((1176 + 2019) <= (4754 - (9 + 784))) and (v108 <= (7 + 22))) then
																if (((3030 - (1339 + 529)) == (1278 - (73 + 43))) and (v108 == (84 - 56))) then
																	if (((4088 - (86 + 477)) > 2939) and v105[v107[2]]) then
																		v90 = v90 + (2 - 1);
																	else
																		v90 = v107[3 + 0];
																	end
																else
																	v105[v107[2 + 0]] = v105[v107[12 - 9]] * v105[v107[139 - (68 + 67)]];
																end
															elseif ((v108 > (1570 - (376 + 1164))) or ((1848 + 1428) > (3335 + 490))) then
																v105[v107[2 + 0]] = #v105[v107[6 - 3]];
															else
																local v208 = 0;
																local v209;
																local v210;
																local v211;
																local v212;
																local v213;
																while true do
																	if ((v208 == (1 + 0)) or ((882 - 328) >= (2301 - (36 + 1542)))) then
																		v211 = nil;
																		v212 = nil;
																		v208 = 3 - 1;
																	end
																	if (((3 - 1) == v208) or (3623 < ((1151 + 3271) - 1928))) then
																		v213 = nil;
																		while true do
																			if ((v209 == 0) or ((4107 - (17 + 55)) == (9029 - 6743))) then
																				v210 = v107[6 - 4];
																				v211, v212 = v102(v105[v210](v105[v210 + ((5307 - 4220) - (875 + 69 + 142))]));
																				v209 = 1 + 0;
																			end
																			if ((3213 > 586) and (v209 == (1853 - (1398 + 454)))) then
																				v91 = (v212 + v210) - (1 + 0);
																				v213 = 0;
																				v209 = 2 + 0;
																			end
																			if ((v209 == (126 - (89 + 35))) or ((5146 - (1114 + 491)) == 3049)) then
																				for v350 = v210, v91 do
																					local v351 = (627 - (267 + 360)) - 0;
																					local v352;
																					while true do
																						if ((v351 == (0 - 0)) or ((109 + 1290) > 3667)) then
																							v352 = 921 - (206 + 715);
																							while true do
																								if ((2926 > (3689 - (576 + 737))) and (v352 == ((1218 - 640) - (124 + 52 + 402)))) then
																									v213 = v213 + 1;
																									v105[v350] = v211[v213];
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				break;
																			end
																		end
																		break;
																	end
																	if ((v208 == (0 + 0)) or (55 >= (1172 - (53 + 46)))) then
																		v209 = 0;
																		v210 = nil;
																		v208 = 1;
																	end
																end
															end
														elseif ((v108 <= 47) or ((492 + 29) == (9708 - 6547))) then
															if (((1572 + 217) >= 1061) and (v108 <= (322 - (48 + 235)))) then
																if ((v108 <= (44 - 9)) or ((3373 - ((110 - 57) + 122)) == ((194 + 2020) - (1275 + 200)))) then
																	if ((3022 == (4215 - (992 + 201))) and (v108 <= (1056 - (266 + 757)))) then
																		if (((2389 + 1075) > (2247 - (278 + 60))) and (v108 == (71 - 39))) then
																			local v214 = 0;
																			local v215;
																			local v216;
																			local v217;
																			while true do
																				if ((v214 == (876 - (330 + 546))) or (((5359 - 3978) - (520 + 61)) <= 85)) then
																					v215 = 0;
																					v216 = nil;
																					v214 = 1 + 0;
																				end
																				if ((((14135 - 5605) - 5952) >= 2168) and (v214 == (1 + 0))) then
																					v217 = nil;
																					while true do
																						if ((v215 == (80 - (43 + 26 + 11))) or (((2992 + 1145) - 1512) < (7319 - 5020))) then
																							v216 = v107[1429 - (255 + 1172)];
																							v217 = {};
																							v215 = 2 - 1;
																						end
																						if ((v215 == 1) or (((13361 - (176 + 684)) - 7754) < (5859 - 1275))) then
																							for v353 = 2 - 1, #v104 do
																								local v354 = 0;
																								local v355;
																								while true do
																									if ((v354 == ((316 + 1174) - (209 + 555 + 726))) or (4305 <= (3865 - (17 + 6)))) then
																										v355 = v104[v353];
																										for v411 = 45 - (21 + 24), #v355 do
																											local v412 = 0 + 0;
																											local v413;
																											local v414;
																											local v415;
																											local v416;
																											local v417;
																											while true do
																												if ((3435 >= (3002 - 2034)) and (v412 == (1630 - (1046 + 584)))) then
																													v413 = 0 - 0;
																													v414 = nil;
																													v412 = 1 - 0;
																												end
																												if (((2527 - 1157) > (55 + 811)) and ((1 - 0) == v412)) then
																													v415 = nil;
																													v416 = nil;
																													v412 = 1 + 1;
																												end
																												if (((553 + 2431) == (2306 + 678)) and (v412 == ((4 + 0) - 2))) then
																													v417 = nil;
																													while true do
																														if ((v413 == (2 + 0)) or (((9334 - 6235) + 1242) <= (1245 + 2943))) then
																															while true do
																																if (((334 + 1048) < (4270 - (158 + 938))) and (v414 == (707 - (664 + (208 - 165))))) then
																																	local v480 = 0 - 0;
																																	local v481;
																																	while true do
																																		if ((((9723 + 1152) - 7069) > (1896 - (370 + 147))) and (v480 == (1188 - (851 + 337)))) then
																																			v481 = 0 - 0;
																																			while true do
																																				if ((v481 == (1012 - (311 + 700))) or (1516 <= (1347 - (269 + 152)))) then
																																					v414 = 1 + 0;
																																					break;
																																				end
																																				if (((164 + 461 + 457) <= (3480 + (306 - 77))) and ((0 + 0) == v481)) then
																																					local v489 = 311 - (60 + 251);
																																					while true do
																																						if ((3146 <= (4261 - (992 + 117))) and (v489 == (0 - 0))) then
																																							v415 = v355[v411];
																																							v416 = v415[237 - (131 + (732 - (164 + 463)))];
																																							v489 = 1 + 0;
																																						end
																																						if (((1134 - 680) <= (9294 - 4717)) and (v489 == (1 + 0))) then
																																							v481 = 350 - (235 + (290 - 176));
																																							break;
																																						end
																																					end
																																				end
																																			end
																																			break;
																																		end
																																	end
																																end
																																if (((4012 + 580) > (6321 - 3372)) and (v414 == (67 - (23 + 43)))) then
																																	v417 = v415[2 + (0 - 0)];
																																	if (((v416 == v105) and (v417 >= v216)) or ((11432 - 8288) == 4837)) then
																																		local v485 = 1334 - (86 + (1829 - 581));
																																		local v486;
																																		while true do
																																			if ((v485 == (1665 - (1104 + 561))) or ((12476 - (7812 - (209 + 104))) <= (109 + 646))) then
																																				v486 = 558 - (22 + 533 + 3);
																																				while true do
																																					if (((1223 - 929) < 4379) and (v486 == (0 + 0 + 0))) then
																																						v217[v417] = v416[v417];
																																						v415[1 - 0] = v217;
																																						break;
																																					end
																																				end
																																				break;
																																			end
																																		end
																																	end
																																	break;
																																end
																															end
																															break;
																														end
																														if ((v413 == (0 + 0)) or (1391 == (5473 - (839 + 185)))) then
																															v414 = 0 + 0;
																															v415 = nil;
																															v413 = 2 - 1;
																														end
																														if ((v413 == 1) or ((84 + 92) >= (1345 - (354 + 393)))) then
																															v416 = nil;
																															v417 = nil;
																															v413 = 1 + 1;
																														end
																													end
																													break;
																												end
																											end
																										end
																										break;
																									end
																								end
																							end
																							break;
																						end
																					end
																					break;
																				end
																			end
																		else
																			v105[v107[1613 - (1141 + 470)]] = v105[v107[3]] - v105[v107[381 - (359 + 18)]];
																		end
																	elseif (((5188 - (1379 + 142)) > (561 + 1921)) and (v108 == (34 + 0))) then
																		v105[v107[4 - 2]] = v107[3] ^ v105[v107[4]];
																	else
																		for v279 = v107[2 + 0], v107[13 - 10] do
																			v105[v279] = nil;
																		end
																	end
																elseif ((((9587 - 4429) - (411 + 226)) == (620 + 3901)) and (v108 <= (18 + 19))) then
																	if ((v108 > (63 - 27)) or ((939 - (628 + 157)) > (4430 - (719 + 1879)))) then
																		if ((v107[3 - 1] == v105[v107[614 - (558 + 52)]]) or ((3353 - 1968) < (114 + 486))) then
																			v90 = v90 + ((1264 - (800 + 461)) - 2);
																		else
																			v90 = v107[3];
																		end
																	else
																		local v220 = 1736 - (622 + 1114);
																		local v221;
																		while true do
																			if (((5074 - 2613) >= ((2016 + 1636) - 1473)) and (v220 == (0 + 0))) then
																				v221 = 0 - 0;
																				while true do
																					if ((v221 == (0 - 0)) or ((7093 - 2428) < 3325)) then
																						v105[v107[7 - (503 - (460 + 38))]] = v107[(272 - (132 + 137)) + 0] ~= ((1591 - (516 + 1075)) - 0);
																						v90 = v90 + 1 + 0;
																						break;
																					end
																				end
																				break;
																			end
																		end
																	end
																elseif ((1702 <= 1862) and (v108 == (22 + 16))) then
																	local v222 = 0;
																	local v223;
																	local v224;
																	while true do
																		if (((6648 - 3914) >= ((1896 - (578 + 645)) - (85 + 21))) and (v222 == ((1773 - (7 + 11)) - (203 + 1551)))) then
																			for v307 = v223 + 1 + 0, v91 do
																				v7(v224, v105[v307]);
																			end
																			break;
																		end
																		if ((v222 == 0) or ((4293 - (256 + 59)) > (9939 - 5663))) then
																			local v302 = 0 - 0;
																			while true do
																				if ((v302 == (13 - (8 + 5))) or ((3026 + 1017) > (6414 - (1059 + 651)))) then
																					v223 = v107[1461 - (1415 + 44)];
																					v224 = v105[v223];
																					v302 = 620 - (373 + 246);
																				end
																				if ((v302 == (441 - (210 + 230))) or (3229 < 80)) then
																					v222 = 1 + 0;
																					break;
																				end
																			end
																		end
																	end
																else
																	v35[v107[3 - 0]] = v105[v107[1890 - (245 + 1643)]];
																end
															elseif ((4481 > 3909) and (v108 <= (123 - 80))) then
																if (((1532 - 1015) < (4596 - 3458)) and (v108 <= (122 - 81))) then
																	if ((v108 == 40) or ((3169 + 124) == (8810 - 4136))) then
																		local v227 = 0 + 0;
																		local v228;
																		local v229;
																		local v230;
																		local v231;
																		while true do
																			if ((v227 == (7 - 5)) or (((7400 - 4742) - ((5341 - 4101) + 416)) <= (627 - (125 + 304)))) then
																				while true do
																					if ((v228 == (1039 - (481 + 557))) or ((3179 + 539) > 4807)) then
																						v231 = v107[10 - 7];
																						for v356 = 1156 - (635 + 520), v231 do
																							v230[v356] = v105[v229 + v356];
																						end
																						break;
																					end
																					if ((v228 == (1183 - ((988 - 790) + 985))) or (((98 + 2253) - 783) == (1287 + 2969 + 246))) then
																						local v331 = 0;
																						while true do
																							if (((1 + 0) == v331) or (2530 >= (4038 - ((1828 - (578 + 987)) + 63)))) then
																								v228 = 1;
																								break;
																							end
																							if ((v331 == (0 + 0)) or (((515 + 4175) - (103 + 13)) < (323 + 1288))) then
																								local v378 = (329 + 265) - (410 + 184);
																								while true do
																									if ((v378 == (1 + 0)) or ((3582 + 331) <= (1336 + 1320))) then
																										v331 = 1 + 0;
																										break;
																									end
																									if (((1131 - 604) < (20009 - 15405)) and ((1650 - (364 + 1286)) == v378)) then
																										v229 = v107[2];
																										v230 = v105[v229];
																										v378 = 1;
																									end
																								end
																							end
																						end
																					end
																				end
																				break;
																			end
																			if ((0 == v227) or ((1400 + 532) > 4237)) then
																				v228 = 0 + 0 + 0;
																				v229 = nil;
																				v227 = 1 + 0;
																			end
																			if (((3093 - (400 + 191)) > (1204 + 46)) and (v227 == (1147 - (552 + 594)))) then
																				local v303 = 0 - 0;
																				while true do
																					if ((1763 < (9520 - 5112)) and (v303 == (931 - (547 + (1590 - (1036 + 170)))))) then
																						v230 = nil;
																						v231 = nil;
																						v303 = 1;
																					end
																					if (((421 - (294 + 24)) < (4716 - (50 + 34))) and (v303 == 1)) then
																						v227 = 2;
																						break;
																					end
																				end
																			end
																		end
																	else
																		v105[v107[2 + 0]] = v105[v107[8 - (9 - 4)]] / v105[v107[728 - (538 + 186)]];
																	end
																elseif ((v108 == (1323 - (457 + 824))) or ((4289 - (593 + 290)) >= (3531 + 1100))) then
																	do
																		return;
																	end
																else
																	v105[v107[(2156 - (183 + 634)) - (1176 + 161)]] = v30(v100[v107[3]], nil, v36);
																end
															elseif ((v108 <= 45) or ((8004 - 5409) < (1916 - (543 + 430)))) then
																if ((v108 > (68 - 24)) or ((2508 - (83 + 12 + 153)) == (1846 + 145))) then
																	v105[v107[2]] = v105[v107[3]] + v105[v107[926 - (457 + 465)]];
																else
																	local v235 = 0 + 0;
																	local v236;
																	local v237;
																	while true do
																		if ((3254 >= 2765) and ((3 - 2) == v235)) then
																			while true do
																				if ((v236 == (0 + 0)) or ((6142 - (1011 + 748)) < 3751)) then
																					v237 = v107[2];
																					v105[v237](v105[v237 + (1583 - (318 + 1264))]);
																					break;
																				end
																			end
																			break;
																		end
																		if (((906 + 240 + 320) <= 4192) and (v235 == 0)) then
																			v236 = 0;
																			v237 = nil;
																			v235 = 1 + 0;
																		end
																	end
																end
															elseif (((8182 - 5990) > (3656 - 2084)) and (v108 == (272 - (114 + 112)))) then
																v105[v107[(1282 + 548) - (25 + 1803)]] = v107[(277 - (8 + 260)) - 6] / v107[4 + 0];
															else
																v105[v107[618 - (463 + 153)]] = v105[v107[(917 + 4) - ((1247 - 627) + 298)]][v107[(3 - 1) + 2]];
															end
														elseif ((v108 <= (1654 - (1243 + 356))) or ((1071 + 98) < (3873 - 2782))) then
															if (((5221 - (6 + 34 + 1134)) > (623 + 494)) and (v108 <= (544 - (50 + 443)))) then
																if ((v108 <= (41 + 8)) or ((9905 - 6603) >= (5659 - (15 + 1917)))) then
																	if (((3775 - 2998) == 777) and (v108 > (158 - 110))) then
																		v105[v107[2 - 0]] = v107[3] ~= (1506 - (81 + 422 + 1003));
																	else
																		v105[v107[2 + 0]] = v107[3];
																	end
																elseif (((3608 + 399) >= (2204 + 38)) and (v108 == (1913 - (851 + 1012)))) then
																	local v244 = 0;
																	local v245;
																	local v246;
																	while true do
																		if ((v244 == ((1402 - (1122 + 279)) + (787 - (758 + 29)))) or ((9548 - 6442) < ((1461 + 2015) - 2663))) then
																			while true do
																				if (((2537 - 578) == 1959) and ((0 - 0) == v245)) then
																					v246 = v107[2];
																					do
																						return v13(v105, v246, v246 + v107[3]);
																					end
																					break;
																				end
																			end
																			break;
																		end
																		if (((3532 - (14 + 460)) < (5337 - (1376 + 254))) and ((0 + 0) == v244)) then
																			v245 = 0;
																			v246 = nil;
																			v244 = 1 + 0;
																		end
																	end
																elseif ((1157 == (973 + 184)) and (v105[v107[2]] <= v105[v107[(18 + 0) - 14]])) then
																	v90 = v90 + 1 + 0;
																else
																	v90 = v107[3 - 0];
																end
															elseif ((v108 <= 53) or (((2646 - 1074) - (37 + 1 + 0)) >= (557 + 2706))) then
																if ((v108 > (936 - ((2262 - (741 + 1053)) + 416))) or (3498 == (3532 - 2276))) then
																	local v247 = 0;
																	local v248;
																	local v249;
																	while true do
																		if (((2945 - 846) <= 2413) and (v247 == (1756 - (700 + 1056)))) then
																			local v304 = (195 - (137 + 58)) - 0;
																			while true do
																				if ((v304 == (2 - 1)) or ((1803 - (107 + 39)) >= 4730)) then
																					v247 = 1733 - (925 + 807);
																					break;
																				end
																				if ((v304 == 0) or (1182 > 4977)) then
																					v248 = v107[13 - 10];
																					v249 = v105[v248];
																					v304 = 2 - 1;
																				end
																			end
																		end
																		if (((3948 + 120) == (6087 - 2019)) and (v247 == (2 - 1))) then
																			for v308 = v248 + 1 + 0, v107[10 - 6] do
																				v249 = v249 .. v105[v308];
																			end
																			v105[v107[(423 - (355 + 67)) + (3 - 2)]] = v249;
																			break;
																		end
																	end
																else
																	v105[v107[4 - 2]] = v105[v107[4 - 1]] * v107[2 + 2 + 0];
																end
															elseif ((v108 > (115 - 61)) or (2694 == 4711)) then
																local v251 = 0;
																local v252;
																local v253;
																local v254;
																while true do
																	if (((4630 - (1719 + 216)) <= (3470 - (565 + 145))) and (v251 == (1 + 0))) then
																		v254 = nil;
																		while true do
																			if ((v252 == 1) or (4115 > ((5627 - (180 + 1770)) + 1025))) then
																				while true do
																					if ((v253 == (1 + 0)) or (2973 <= (3835 - ((1430 - 656) + 368)))) then
																						for v393 = v254, v91 do
																							local v394 = (1427 - (984 + 443)) + 0;
																							local v395;
																							local v396;
																							local v397;
																							while true do
																								if (((807 - (730 + 77)) == v394) or ((11316 - 7942) == (5388 - (228 + 615)))) then
																									v395 = 529 - (56 + 473);
																									v396 = nil;
																									v394 = 1 - 0;
																								end
																								if (((7905 - 3881) >= 1688) and (v394 == (1 - 0))) then
																									v397 = nil;
																									while true do
																										if ((v395 == (0 - 0)) or ((73 - 42) >= (5937 - 3039))) then
																											v396 = 755 - (360 + 395);
																											v397 = nil;
																											v395 = 1 + 0;
																										end
																										if ((v395 == (1622 - ((4418 - 2898) + 101))) or (413 > (1675 - 1058))) then
																											while true do
																												if ((v396 == (949 - (103 + 846))) or ((4141 - 1247) <= (68 + (2781 - (346 + 77))))) then
																													v397 = v103[v393 - v254];
																													v105[v393] = v397;
																													break;
																												end
																											end
																											break;
																										end
																									end
																									break;
																								end
																							end
																						end
																						break;
																					end
																					if (((572 - (324 + 248)) == v253) or ((119 + 25) >= 633)) then
																						local v379 = 0 + (1149 - (421 + 728));
																						local v380;
																						while true do
																							if (((3745 - (70 + (2712 - 1079))) > (5521 - 4343)) and (v379 == (847 - (339 + 508)))) then
																								v380 = 0;
																								while true do
																									if ((3219 > (216 + (598 - (38 + 36)))) and (v380 == (0 + 0))) then
																										v254 = v107[1822 - (1348 + 472)];
																										v91 = (v254 + v106) - (78 - (75 + 2));
																										v380 = 1 + (25 - (12 + 13));
																									end
																									if ((((3579 - (175 + 60)) - (738 + (2045 - 1159))) >= (473 + 869)) and (v380 == (1 - 0))) then
																										v253 = 1 - 0;
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																				end
																				break;
																			end
																			if ((1854 < 3788) and (v252 == (1485 - (1059 + 426)))) then
																				local v336 = 0 + 0;
																				while true do
																					if (((3255 - 2414) == 841) and ((767 - (314 + 453)) == v336)) then
																						v253 = 0 - (1864 - (582 + 1282));
																						v254 = nil;
																						v336 = 1 + 0;
																					end
																					if (((23169 - 18461) >= 903) and (v336 == (1 + 0))) then
																						v252 = 1 + (0 - 0);
																						break;
																					end
																				end
																			end
																		end
																		break;
																	end
																	if ((4284 == 4284) and (v251 == (0 - 0))) then
																		v252 = 0;
																		v253 = nil;
																		v251 = 2 - 1;
																	end
																end
															else
																v105[v107[2]] = v105[v107[3]][v105[v107[15 - 11]]];
															end
														elseif ((v108 <= (42 + (1142 - (806 + 319)))) or ((3069 - (423 + 1516)) == 3480)) then
															if ((v108 <= (424 - (85 + 282))) or ((810 + 1056) >= (4588 - (150 + 298)))) then
																if (((8457 - 4564) > 1515) and (v108 == (141 - 85))) then
																	v105[v107[5 - 3]] = v35[v107[5 - 2]];
																elseif ((1446 < (13124 - 8631)) and not v105[v107[4 - 2]]) then
																	v90 = v90 + (53 - (25 + 27));
																else
																	v90 = v107[3];
																end
															elseif ((v108 == (178 - 120)) or ((5909 - (586 + 1308)) <= (3091 - (75 + 417)))) then
																v105[v107[2 + 0]] = v105[v107[1 + 2]] + v107[9 - 5];
															elseif ((v105[v107[1 + 1]] < v105[v107[2 + 2]]) or ((2007 - (1083 + 146)) > (6308 - 3467))) then
																v90 = v90 + (1 - 0);
															else
																v90 = v107[3];
															end
														elseif (((1549 + 1894) < (6799 - (871 + 941))) and (v108 <= (2 + (1734 - (1053 + 622))))) then
															if ((v108 > (40 + 2 + 18)) or (1862 >= (3294 - 1052))) then
																local v260 = 0 - 0;
																local v261;
																local v262;
																local v263;
																local v264;
																local v265;
																local v266;
																while true do
																	if ((v260 == (5 - 3)) or ((3728 + 60) == (3008 - (322 + 167)))) then
																		v265 = nil;
																		v266 = nil;
																		v260 = (6 - 3) + 0;
																	end
																	if ((v260 == ((2 + 1) - (5 - 3))) or ((3009 - (500 + 1055)) == 4145)) then
																		v263 = nil;
																		v264 = nil;
																		v260 = 1812 - (932 + (2533 - 1655));
																	end
																	if ((v260 == 3) or ((1712 - (38 + 125)) > (2332 + 1563))) then
																		while true do
																			if (((15049 - 11206) <= 4315) and (v261 == (556 - ((1389 - (613 + 562)) + 342)))) then
																				local v337 = 0 - 0;
																				while true do
																					if (((3942 - 2696) >= ((2691 - (1397 + 26)) - (242 + 303))) and ((1905 - (1876 + (504 - (440 + 36)))) == v337)) then
																						v261 = 1 + 0;
																						break;
																					end
																					if ((v337 == 0) or ((4135 - 1573) >= 4099)) then
																						v262 = 1354 - (508 + 846);
																						v263 = nil;
																						v337 = 730 - (119 + 610);
																					end
																				end
																			end
																			if (((2972 - 1575) < (1452 + 1224)) and (2 == v261)) then
																				v266 = nil;
																				while true do
																					if ((v262 == 2) or ((8214 - 4829) == (3746 - 1570))) then
																						for v398 = v263, v91 do
																							local v399 = 1918 - ((15 - 3) + 1906);
																							local v400;
																							while true do
																								if ((v399 == (1297 - (484 + 813))) or ((2720 + 1201) == (2702 - (255 + 164)))) then
																									v400 = 0 - (0 + 0);
																									while true do
																										if ((((2756 - (179 + 737)) - (1431 + 409)) == v400) or (((2631 + 1028) - (46 + 951)) <= (3498 - 1123))) then
																											v266 = v266 + (422 - (133 + 288));
																											v105[v398] = v264[v266];
																											break;
																										end
																									end
																									break;
																								end
																							end
																						end
																						break;
																					end
																					if ((v262 == (3 - 2)) or ((294 + (4707 - 1569)) == (2558 - (667 + 798)))) then
																						local v381 = 1741 - (180 + 1561);
																						local v382;
																						while true do
																							if ((v381 == (0 - 0)) or ((3121 + 321) <= (3859 - 1288))) then
																								v382 = 0;
																								while true do
																									if ((v382 == (1936 - (898 + 1038))) or (4498 == (4743 - (1109 + 415)))) then
																										local v453 = 465 - (168 + 297);
																										while true do
																											if (((6807 - 3447) <= (5354 - (973 + 648))) and (v453 == ((1013 - (307 + 704)) - 1))) then
																												v382 = 1 + 0;
																												break;
																											end
																											if (((393 + 3229) == 3622) and (v453 == (726 - (580 + 146)))) then
																												v91 = (v265 + v263) - (2 - 1);
																												v266 = 0 + 0;
																												v453 = 89 - (39 + 49);
																											end
																										end
																									end
																									if ((v382 == (1 - 0)) or ((2598 - (133 + 488)) <= (604 + 262))) then
																										v262 = 231 - (31 + 198);
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					if ((v262 == (0 - 0)) or ((6144 - (288 + 893)) < (8413 - 6270))) then
																						local v383 = 0 + 0;
																						local v384;
																						while true do
																							if ((((8494 - (20 + 1450)) - 4255) > 1993) and ((0 + 0) == v383)) then
																								v384 = 0 - 0;
																								while true do
																									if ((v384 == 1) or ((3166 - (68 + 71)) > (1641 + 2631))) then
																										v262 = 1;
																										break;
																									end
																									if (((29 + 59) <= ((4205 - (715 + 225)) + 232)) and (v384 == 0)) then
																										v263 = v107[(7 - 2) - 3];
																										v264, v265 = v102(v105[v263](v13(v105, v263 + (1406 - (1089 + 316)), v107[2 + 1])));
																										v384 = 1;
																									end
																								end
																								break;
																							end
																						end
																					end
																				end
																				break;
																			end
																			if ((v261 == (3 - (498 - (22 + 474)))) or ((1164 - (541 + 416)) == (4292 - (630 + 640)))) then
																				local v338 = 0 + 0;
																				while true do
																					if (((1188 + 1636) > (3611 - (1132 + 646))) and (v338 == (0 - 0))) then
																						v264 = nil;
																						v265 = nil;
																						v338 = 1 + 0;
																					end
																					if ((v338 == (1676 - (8 + 1667))) or ((4880 - 2536) <= 1942)) then
																						v261 = 813 - (260 + 551);
																						break;
																					end
																				end
																			end
																		end
																		break;
																	end
																	if ((v260 == (0 + 0)) or (3339 <= 1243)) then
																		v261 = 808 - (399 + 409);
																		v262 = nil;
																		v260 = 224 - (180 + 19 + 24);
																	end
																end
															else
																v105[v107[8 - 6]] = v105[v107[1 + 0 + 2]] / v107[4];
															end
														elseif ((v108 == (23 + 39)) or ((2098 + 273) >= (1448 + 93 + 3438))) then
															local v268 = 0 - 0;
															local v269;
															local v270;
															local v271;
															local v272;
															while true do
																if ((v268 == (304 - (169 + 135))) or (1285 < 94)) then
																	v269 = 0 + 0;
																	v270 = nil;
																	v268 = 1 + 0;
																end
																if ((v268 == 1) or ((6364 - 2228) <= (1400 - 507))) then
																	local v306 = 0 - 0;
																	while true do
																		if ((v306 == (1 + 0)) or ((2010 + 666 + 154) > 3394)) then
																			v268 = 1142 - (577 + 325 + 238);
																			break;
																		end
																		if (((2857 - (684 + 772)) >= (1072 - (11 + 5))) and ((918 - (65 + 853)) == v306)) then
																			v271 = nil;
																			v272 = nil;
																			v306 = 1668 - (1036 + 631);
																		end
																	end
																end
																if ((v268 == ((1513 - (764 + 743)) - 4)) or ((3942 - 2070) < 181)) then
																	while true do
																		if ((v269 == 1) or ((2979 + 688) < (925 + 777))) then
																			v272 = 0 - 0;
																			for v359 = v270, v107[1783 - (1304 + 475)] do
																				local v360 = 0 + (0 - 0);
																				while true do
																					if (((301 + 1396) == (1451 + 246)) and ((0 + (1224 - (117 + 1107))) == v360)) then
																						v272 = v272 + 1;
																						v105[v359] = v271[v272];
																						break;
																					end
																				end
																			end
																			break;
																		end
																		if ((238 < (3381 - (956 + 402))) and (v269 == (0 - 0))) then
																			local v339 = 0;
																			local v340;
																			while true do
																				if ((v339 == (0 - 0)) or ((355 - 221) > (3054 - (277 + 855)))) then
																					v340 = 0;
																					while true do
																						if ((v340 == (1 + 0)) or (2772 >= 3339)) then
																							v269 = 1 + 0;
																							break;
																						end
																						if (((1028 + 1101) >= (2482 - (486 + 1009))) and (v340 == (0 - 0))) then
																							local v426 = 36 - (21 + 9 + 6);
																							while true do
																								if ((v426 == (4 - 3)) or (((20648 - (1527 + 130)) - (40067 - 25311)) <= (282 + 2098 + 781))) then
																									v340 = 1612 - (149 + 1462);
																									break;
																								end
																								if ((3102 > (317 + 110)) and (v426 == 0)) then
																									v270 = v107[2];
																									v271 = {v105[v270](v13(v105, v270 + 1 + 0, v107[2 + 1]))};
																									v426 = 1 - 0;
																								end
																							end
																						end
																					end
																					break;
																				end
																			end
																		end
																	end
																	break;
																end
															end
														else
															local v273 = 0 + 0;
															local v274;
															local v275;
															local v276;
															local v277;
															local v278;
															while true do
																if ((2430 == (6298 - 3868)) and (v273 == (0 + 0))) then
																	v274 = 0 + 0;
																	v275 = nil;
																	v273 = 1;
																end
																if ((v273 == ((16 - 7) - 7)) or ((36 + 1853) <= (81 + 2))) then
																	v278 = nil;
																	while true do
																		if (((2807 + 34 + 1103) == (9445 - 5501)) and (v274 == 0)) then
																			local v341 = (0 + 0) - 0;
																			while true do
																				if (((4041 - 1853) < (4744 - (720 + 638))) and (1 == v341)) then
																					v274 = 884 - (485 + 398);
																					break;
																				end
																				if (((12 + 118 + 1718) <= (1499 + (3770 - (141 + 562)))) and (v341 == (0 - (1035 - (682 + 353))))) then
																					local v385 = 0 - 0;
																					while true do
																						if (((0 + 0) == v385) or ((1271 + 596) > (4227 - (12 + 54 + 87)))) then
																							v275 = v107[6 - 4];
																							v276, v277 = v102(v105[v275](v13(v105, v275 + 1 + (0 - 0), v91)));
																							v385 = 1;
																						end
																						if ((v385 == (2 - 1)) or ((192 + 221) == (2727 + 126))) then
																							v341 = 2 - 1;
																							break;
																						end
																					end
																				end
																			end
																		end
																		if ((((1420 - (542 + 184)) - (33 + 282)) == (1517 - 1138)) and (v274 == 2)) then
																			for v361 = v275, v91 do
																				local v362 = 0 - 0;
																				local v363;
																				while true do
																					if ((0 == v362) or (4375 < (5440 - 2180))) then
																						v363 = 0 + (0 - 0);
																						while true do
																							if ((v363 == (314 - (133 + 181))) or (242 > (3441 - (2386 - 1219)))) then
																								v278 = v278 + 1 + 0;
																								v105[v361] = v276[v278];
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			break;
																		end
																		if (((6274 - (1163 + 517)) < (4086 + (2797 - 2044))) and (v274 == (1 - 0))) then
																			local v342 = 0 + 0;
																			while true do
																				if (((1815 - 496) < (3803 - 1740)) and ((2 - 1) == v342)) then
																					v274 = 3 - 1;
																					break;
																				end
																				if ((v342 == (0 - (0 + 0))) or ((9678 - 5005) < (243 + 616))) then
																					local v386 = (0 - 0) + 0;
																					while true do
																						if ((v386 == ((315 + 402) - (626 + 90))) or (((1048 - (527 + 298)) - 64) > (7528 - 3368))) then
																							v342 = 1 - 0;
																							break;
																						end
																						if ((v386 == (0 - 0)) or ((49 + 159) > (2608 + 1385))) then
																							v91 = (v277 + v275) - (1 + 0);
																							v278 = 0 + 0;
																							v386 = 1075 - ((723 - 483) + (2621 - (1499 + 288)));
																						end
																					end
																				end
																			end
																		end
																	end
																	break;
																end
																if (((4949 - ((101 - 62) + 963)) <= (6216 - (977 + 368))) and (v273 == (1 + 0))) then
																	v276 = nil;
																	v277 = nil;
																	v273 = 1 + 1;
																end
															end
														end
														v90 = v90 + (1189 - (836 + 352));
														break;
													end
												end
											end
										end
										v89 = 3;
									end
								end
							end;
						end
						if (0 == v41) then
							v42 = v34[1];
							v43 = v34[2];
							v41 = 1;
						end
					end
				end
				return v30(v29(), {}, v17)(...);
			end
			if (3 == v18) then
				function v25()
					local v45 = v24();
					local v46 = v24();
					local v47 = 1 + 0 + 0;
					local v48 = (v21(v46, 1462 - (181 + 1280), (1282 - (893 + 377)) + 4 + 4) * ((4 - 2) ^ (15 + 17))) + v45;
					local v49 = v21(v46, 215 - ((136 - 30) + 88), (3446 - 2699) - (671 + 45));
					local v50 = ((v21(v46, 10 + 22) == ((1756 - (29 + 7)) - (1125 + 594))) and -(2 - 1)) or (1 + 0);
					if (v49 == (1619 - (1411 + 208))) then
						if (v48 == (1139 - (874 + 265))) then
							return v50 * (1481 - (336 + 1145));
						else
							v49 = 1;
							v47 = 1046 - (427 + 619);
						end
					elseif (v49 == (3790 - 1743)) then
						return ((v48 == 0) and (v50 * ((1848 - (1548 + 299)) / (0 + 0 + 0)))) or (v50 * NaN);
					end
					return v8(v50, v49 - (186 + 486 + 351)) * (v47 + (v48 / ((1684 - (528 + (4322 - 3168))) ^ (1876 - ((6848 - 5261) + 237)))));
				end
				v26 = nil;
				function v26(v37)
					local v51;
					if not v37 then
						local v75 = (16 - (12 + 4)) + 0;
						while true do
							if (v75 == ((68 - (34 + 34)) - 0)) then
								v37 = v24();
								if (v37 == ((0 + 0) - 0)) then
									return "";
								end
								break;
							end
						end
					end
					v51 = v3(v16, v19, (v19 + v37) - (1 + 0));
					v19 = v19 + v37;
					local v52 = {};
					for v69 = 1617 - (520 + 1096), #v51 do
						v52[v69] = v2(v1(v3(v51, v69, v69)));
					end
					return v6(v52);
				end
				v27 = v24;
				v18 = 4;
			end
			if (4 == v18) then
				v28 = nil;
				function v28(...)
					return {...}, v12("#", ...);
				end
				v29 = nil;
				function v29()
					local v53 = 0;
					local v54;
					local v55;
					local v56;
					local v57;
					local v58;
					local v59;
					local v60;
					while true do
						if (v53 == (1 + 1)) then
							local v82 = 0 - 0;
							while true do
								if (v82 == 1) then
									v53 = 3;
									break;
								end
								if (0 == v82) then
									v58 = nil;
									v59 = nil;
									v82 = 1;
								end
							end
						end
						if (v53 ~= (1 + 0)) then
						else
							local v83 = 0;
							while true do
								if (v83 ~= 0) then
								else
									v56 = nil;
									v57 = nil;
									v83 = 1;
								end
								if (v83 ~= (2 - 1)) then
								else
									v53 = 2;
									break;
								end
							end
						end
						if (v53 == 3) then
							v60 = nil;
							while true do
								local v86 = 0 - 0;
								local v87;
								local v88;
								while true do
									if (v86 ~= 1) then
									else
										while true do
											if (v87 == (546 - (77 + 469))) then
												v88 = 0;
												while true do
													if (v88 ~= 1) then
													else
														if (v54 ~= 2) then
														else
															local v117 = 1943 - (1577 + 366);
															local v118;
															while true do
																if (v117 == 0) then
																	v118 = 0 - 0;
																	while true do
																		local v124 = 961 - (912 + 49);
																		while true do
																			if ((1805 - (1247 + 558)) == v124) then
																				if (v118 == (503 - (177 + 325))) then
																					local v127 = 0;
																					while true do
																						if (v127 == (852 - (808 + 44))) then
																							for v289 = 1 + 0, v24() do
																								v57[v289] = v24();
																							end
																							return v58;
																						end
																					end
																				end
																				if (v118 ~= (0 - 0)) then
																				else
																					local v128 = 1576 - (499 + 1077);
																					while true do
																						if (v128 ~= 0) then
																						else
																							for v291 = 2 - 1, v24() do
																								local v292 = 0;
																								local v293;
																								local v294;
																								while true do
																									if (v292 ~= (2 - 1)) then
																									else
																										while true do
																											if (v293 == (0 + 0)) then
																												v294 = v22();
																												if (v21(v294, 1 + 0, 1785 - (200 + 1584)) == 0) then
																													local v403 = 0;
																													local v404;
																													local v405;
																													local v406;
																													local v407;
																													local v408;
																													while true do
																														if ((3 - 2) ~= v403) then
																														else
																															v406 = nil;
																															v407 = nil;
																															v403 = 1864 - (754 + 1108);
																														end
																														if (v403 == (5 - 3)) then
																															v408 = nil;
																															while true do
																																if (v404 == (1 + 0)) then
																																	local v461 = 0 - 0;
																																	while true do
																																		if (v461 ~= (0 - 0)) then
																																		else
																																			v407 = nil;
																																			v408 = nil;
																																			v461 = 1;
																																		end
																																		if (v461 ~= (589 - (539 + 49))) then
																																		else
																																			v404 = 2 + 0;
																																			break;
																																		end
																																	end
																																end
																																if (v404 ~= 2) then
																																else
																																	while true do
																																		if (v405 == (96 - (34 + 60))) then
																																			local v469 = 0;
																																			local v470;
																																			while true do
																																				if (v469 ~= 0) then
																																				else
																																					v470 = 0 + 0;
																																					while true do
																																						if ((2 - 1) ~= v470) then
																																						else
																																							v405 = 3;
																																							break;
																																						end
																																						if (v470 ~= (1385 - (297 + 1088))) then
																																						else
																																							local v487 = 114 - (55 + 59);
																																							while true do
																																								if (v487 ~= (119 - (111 + 7))) then
																																								else
																																									v470 = 1;
																																									break;
																																								end
																																								if (v487 ~= (0 - 0)) then
																																								else
																																									if (v21(v407, 1, 1) == (2 - 1)) then
																																										v408[2] = v60[v408[2 - 0]];
																																									end
																																									if (v21(v407, 2, 2) ~= (779 - (21 + 757))) then
																																									else
																																										v408[3] = v60[v408[3]];
																																									end
																																									v487 = 1;
																																								end
																																							end
																																						end
																																					end
																																					break;
																																				end
																																			end
																																		end
																																		if (v405 ~= 0) then
																																		else
																																			local v471 = 0;
																																			local v472;
																																			while true do
																																				if ((0 - 0) ~= v471) then
																																				else
																																					v472 = 0;
																																					while true do
																																						if (v472 ~= (1 + 0)) then
																																						else
																																							v405 = 1;
																																							break;
																																						end
																																						if (0 == v472) then
																																							local v488 = 0;
																																							while true do
																																								if (v488 ~= 0) then
																																								else
																																									local v493 = 0 + 0;
																																									while true do
																																										if (v493 == 0) then
																																											v406 = v21(v294, 4 - 2, 3);
																																											v407 = v21(v294, 4, 1923 - (1505 + 412));
																																											v493 = 1;
																																										end
																																										if (v493 ~= (1833 - (1391 + 441))) then
																																										else
																																											v488 = 1;
																																											break;
																																										end
																																									end
																																								end
																																								if (v488 ~= (1 + 0)) then
																																								else
																																									v472 = 3 - 2;
																																									break;
																																								end
																																							end
																																						end
																																					end
																																					break;
																																				end
																																			end
																																		end
																																		if (v405 == (1 + 0)) then
																																			local v473 = 0 + 0;
																																			local v474;
																																			local v475;
																																			while true do
																																				if (v473 == 1) then
																																					while true do
																																						if (v474 ~= (1037 - (98 + 939))) then
																																						else
																																							v475 = 0;
																																							while true do
																																								if (v475 == (3 - 2)) then
																																									v405 = 2;
																																									break;
																																								end
																																								if (v475 ~= 0) then
																																								else
																																									local v494 = 0 - 0;
																																									while true do
																																										if (v494 == (0 - 0)) then
																																											v408 = {v23(),v23(),nil,nil};
																																											if (v406 == (0 - 0)) then
																																												local v501 = 0;
																																												local v502;
																																												while true do
																																													if (v501 ~= 0) then
																																													else
																																														v502 = 0;
																																														while true do
																																															if (v502 ~= (0 + 0)) then
																																															else
																																																v408[3] = v23();
																																																v408[4] = v23();
																																																break;
																																															end
																																														end
																																														break;
																																													end
																																												end
																																											elseif (v406 == 1) then
																																												v408[950 - (763 + 184)] = v24();
																																											elseif (v406 == (2 + 0)) then
																																												v408[3] = v24() - ((1 + 1) ^ 16);
																																											elseif (v406 == (1260 - (393 + 864))) then
																																												local v507 = 0 - 0;
																																												local v508;
																																												while true do
																																													if (v507 ~= 0) then
																																													else
																																														v508 = 0 + 0;
																																														while true do
																																															if (v508 ~= 0) then
																																															else
																																																v408[3] = v24() - ((2 + 0) ^ (1418 - (722 + 680)));
																																																v408[4] = v23();
																																																break;
																																															end
																																														end
																																														break;
																																													end
																																												end
																																											end
																																											v494 = 1;
																																										end
																																										if (v494 ~= 1) then
																																										else
																																											v475 = 1 + 0;
																																											break;
																																										end
																																									end
																																								end
																																							end
																																							break;
																																						end
																																					end
																																					break;
																																				end
																																				if (v473 == (0 - 0)) then
																																					v474 = 0 - 0;
																																					v475 = nil;
																																					v473 = 1837 - (1608 + 228);
																																				end
																																			end
																																		end
																																		if (v405 == 3) then
																																			if (v21(v407, 3, 820 - (675 + 142)) == 1) then
																																				v408[9 - 5] = v60[v408[8 - 4]];
																																			end
																																			v55[v291] = v408;
																																			break;
																																		end
																																	end
																																	break;
																																end
																																if (v404 ~= (0 - 0)) then
																																else
																																	v405 = 0;
																																	v406 = nil;
																																	v404 = 1 - 0;
																																end
																															end
																															break;
																														end
																														if (v403 == 0) then
																															local v444 = 1601 - (410 + 1191);
																															while true do
																																if (v444 == (775 - (133 + 642))) then
																																	v404 = 0 - 0;
																																	v405 = nil;
																																	v444 = 1;
																																end
																																if ((2 - 1) ~= v444) then
																																else
																																	v403 = 1 + 0;
																																	break;
																																end
																															end
																														end
																													end
																												end
																												break;
																											end
																										end
																										break;
																									end
																									if (v292 == 0) then
																										v293 = 0;
																										v294 = nil;
																										v292 = 1;
																									end
																								end
																							end
																							for v295 = 126 - (31 + 94), v24() do
																								v56[v295 - (988 - (526 + 461))] = v29();
																							end
																							v128 = 1;
																						end
																						if (v128 == 1) then
																							v118 = 1;
																							break;
																						end
																					end
																				end
																				break;
																			end
																		end
																	end
																	break;
																end
															end
														end
														break;
													end
													if (v88 == (0 + 0)) then
														if (v54 ~= 0) then
														else
															local v119 = 0 - 0;
															local v120;
															while true do
																if (v119 == 0) then
																	v120 = 811 - (773 + 38);
																	while true do
																		if (v120 ~= (1650 - (179 + 1469))) then
																		else
																			v54 = 1899 - (937 + 961);
																			break;
																		end
																		if (v120 ~= 1) then
																		else
																			local v125 = 0;
																			while true do
																				if (v125 == (529 - (109 + 420))) then
																					local v129 = 1272 - (403 + 869);
																					while true do
																						if (v129 ~= 0) then
																						else
																							v57 = {};
																							v58 = {v55,v56,nil,v57};
																							v129 = 1 + 0;
																						end
																						if ((1260 - (153 + 1106)) == v129) then
																							v125 = 1;
																							break;
																						end
																					end
																				end
																				if ((1 + 0) ~= v125) then
																				else
																					v120 = 2 + 0;
																					break;
																				end
																			end
																		end
																		if (v120 ~= 0) then
																		else
																			local v126 = 0;
																			while true do
																				if (v126 ~= 1) then
																				else
																					v120 = 1;
																					break;
																				end
																				if (v126 ~= 0) then
																				else
																					v55 = {};
																					v56 = {};
																					v126 = 1;
																				end
																			end
																		end
																	end
																	break;
																end
															end
														end
														if ((1 - 0) == v54) then
															local v121 = 314 - (127 + 187);
															local v122;
															local v123;
															while true do
																if (v121 ~= 0) then
																else
																	v122 = 0 - 0;
																	v123 = nil;
																	v121 = 1 + 0;
																end
																if ((482 - (228 + 253)) == v121) then
																	while true do
																		if ((0 - 0) ~= v122) then
																		else
																			v123 = 0;
																			while true do
																				if (2 ~= v123) then
																				else
																					v54 = 2;
																					break;
																				end
																				if (v123 ~= (0 - 0)) then
																				else
																					local v130 = 0 - 0;
																					while true do
																						if (v130 ~= (1409 - (514 + 895))) then
																						else
																							v59 = v24();
																							v60 = {};
																							v130 = 1 + 0;
																						end
																						if (v130 == (1142 - (966 + 175))) then
																							v123 = 1;
																							break;
																						end
																					end
																				end
																				if (v123 == 1) then
																					for v132 = 1, v59 do
																						local v133 = 0;
																						local v134;
																						local v135;
																						while true do
																							if (v133 ~= 0) then
																							else
																								local v297 = 1093 - (1013 + 80);
																								while true do
																									if (v297 == 1) then
																										v133 = 1;
																										break;
																									end
																									if (v297 ~= 0) then
																									else
																										v134 = v22();
																										v135 = nil;
																										v297 = 1;
																									end
																								end
																							end
																							if (v133 ~= (1437 - (69 + 1367))) then
																							else
																								if (v134 == (1 + 0)) then
																									v135 = v22() ~= (237 - (31 + 206));
																								elseif (v134 == 2) then
																									v135 = v25();
																								elseif (v134 ~= (5 - 2)) then
																								else
																									v135 = v26();
																								end
																								v60[v132] = v135;
																								break;
																							end
																						end
																					end
																					v58[3] = v22();
																					v123 = 1 + 1;
																				end
																			end
																			break;
																		end
																	end
																	break;
																end
															end
														end
														v88 = 1;
													end
												end
												break;
											end
										end
										break;
									end
									if (v86 == (0 + 0)) then
										v87 = 0 - 0;
										v88 = nil;
										v86 = 2 - 1;
									end
								end
							end
							break;
						end
						if (v53 == 0) then
							local v84 = 0;
							local v85;
							while true do
								if (v84 ~= (0 + 0)) then
								else
									v85 = 0 + 0;
									while true do
										if (v85 == 0) then
											local v97 = 0;
											while true do
												if (v97 ~= 1) then
												else
													v85 = 149 - (73 + 75);
													break;
												end
												if (v97 == 0) then
													v54 = 0 - 0;
													v55 = nil;
													v97 = 1320 - (809 + 510);
												end
											end
										end
										if (v85 ~= (1 + 0)) then
										else
											v53 = 1;
											break;
										end
									end
									break;
								end
							end
						end
					end
				end
				v18 = 5;
			end
			if (v18 == 2) then
				function v23()
					local v61 = 0 - 0;
					local v62;
					local v63;
					while true do
						if (v61 == ((1892 - (90 + 1801)) - 0)) then
							return (v63 * ((1533 - (295 + 220)) - 762)) + v62;
						end
						if (v61 == 0) then
							v62, v63 = v1(v16, v19, v19 + (1371 - (1019 + 350)));
							v19 = v19 + (707 - (648 + 57));
							v61 = 1 + 0;
						end
					end
				end
				v24 = nil;
				function v24()
					local v64 = 165 - (123 + 42);
					local v65;
					local v66;
					local v67;
					local v68;
					while true do
						if (v64 == (1 + 0)) then
							return (v68 * ((7658698 - 4272449) + 13390967)) + (v67 * (136633 - 71097)) + (v66 * (640 - 384)) + v65;
						end
						if (v64 == (0 - 0)) then
							v65, v66, v67, v68 = v1(v16, v19, v19 + (1702 - (1653 + 46)));
							v19 = v19 + 2 + 1 + 1;
							v64 = 1 + 0;
						end
					end
				end
				v25 = nil;
				v18 = 3;
			end
			if (v18 == 0) then
				v19 = 1;
				v20 = nil;
				v16 = v4(v3(v16, 5), "..", function(v38)
					if (v1(v38, 2) == 79) then
						local v76 = 0;
						while true do
							if (v76 == 0) then
								v20 = v0(v3(v38, 1, 1));
								return "";
							end
						end
					else
						local v77 = 0;
						local v78;
						while true do
							if (v77 == 0) then
								v78 = v2(v0(v38, 16));
								if v20 then
									local v95 = 0;
									local v96;
									while true do
										if (v95 == 1) then
											return v96;
										end
										if (v95 == 0) then
											v96 = v5(v78, v20);
											v20 = nil;
											v95 = 1;
										end
									end
								else
									return v78;
								end
								break;
							end
						end
					end
				end);
				v21 = nil;
				v18 = 1;
			end
		end
	end
	vv9(), ...);
end
